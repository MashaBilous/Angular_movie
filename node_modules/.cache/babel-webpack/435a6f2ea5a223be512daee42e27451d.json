{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ShortNumberPipe = /*#__PURE__*/(() => {\n  class ShortNumberPipe {\n    transform(number, args) {\n      if (isNaN(number)) return null; // will only work value is a number\n\n      if (number === null) return null;\n      if (number === 0) return null;\n      let abs = Math.abs(number);\n      const rounder = Math.pow(10, 1);\n      const isNegative = number < 0; // will also work for Negetive numbers\n\n      let key = '';\n      const powers = [{\n        key: 'Q',\n        value: Math.pow(10, 15)\n      }, {\n        key: 'T',\n        value: Math.pow(10, 12)\n      }, {\n        key: 'B',\n        value: Math.pow(10, 9)\n      }, {\n        key: 'M',\n        value: Math.pow(10, 6)\n      }, {\n        key: 'K',\n        value: 1000\n      }];\n\n      for (let i = 0; i < powers.length; i++) {\n        let reduced = abs / powers[i].value;\n        reduced = Math.round(reduced * rounder) / rounder;\n\n        if (reduced >= 1) {\n          abs = reduced;\n          key = powers[i].key;\n          break;\n        }\n      }\n\n      return (isNegative ? '-' : '') + abs + key;\n    }\n\n  }\n\n  ShortNumberPipe.ɵfac = function ShortNumberPipe_Factory(t) {\n    return new (t || ShortNumberPipe)();\n  };\n\n  ShortNumberPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"shortNumber\",\n    type: ShortNumberPipe,\n    pure: true\n  });\n  return ShortNumberPipe;\n})();","map":null,"metadata":{},"sourceType":"module"}